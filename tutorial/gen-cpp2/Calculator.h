/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/futures/Future.h>
#include "calculator_types.h"
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>



namespace example { namespace cpp2 {

class CalculatorSvAsyncIf {
 public:
  virtual ~CalculatorSvAsyncIf() {}
  virtual void async_tm_add(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int32_t num1, int32_t num2) = 0;
  virtual void async_add(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int32_t num1, int32_t num2) = delete;
  virtual folly::Future<int64_t> future_add(int32_t num1, int32_t num2) = 0;
};

class CalculatorAsyncProcessor;

class CalculatorSvIf : public CalculatorSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef CalculatorAsyncProcessor ProcessorType;

  virtual ~CalculatorSvIf() {}
  virtual std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor();
  apache::thrift::concurrency::PriorityThreadManager::PRIORITY getprio_add(apache::thrift::Cpp2RequestContext* reqCtx);
  virtual int64_t add(int32_t num1, int32_t num2);
  folly::Future<int64_t> future_add(int32_t num1, int32_t num2);
  virtual void async_tm_add(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int32_t num1, int32_t num2);
};

class CalculatorSvNull : public CalculatorSvIf {
 public:
  virtual ~CalculatorSvNull() {}
  virtual int64_t add(int32_t num1, int32_t num2);
};

class CalculatorAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  virtual const char* getServiceName();
 protected:
  CalculatorSvIf* iface_;
  virtual folly::Optional<std::string> getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType);
  virtual void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  virtual bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header);
 private:
  static std::unordered_set<std::string> onewayMethods;
  static std::unordered_map<std::string, int16_t> CacheKeyMap;
  typedef void (CalculatorAsyncProcessor::*binaryProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, binaryProcessFunction> binaryProcessMap;
  static CalculatorAsyncProcessor::binaryProcessMap binaryProcessMap_;
  typedef void (CalculatorAsyncProcessor::*compactProcessFunction)(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<apache::thrift::CompactProtocolReader> iprot, apache::thrift::Cpp2RequestContext* context, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  typedef std::unordered_map<std::string, compactProcessFunction> compactProcessMap;
  static CalculatorAsyncProcessor::compactProcessMap compactProcessMap_;
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_add(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_add(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_add(int32_t protoSeqId, apache::thrift::ContextStack* ctx, int64_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_add(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_add(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  CalculatorAsyncProcessor(CalculatorSvIf* iface) :
      iface_(iface) {}

  virtual ~CalculatorAsyncProcessor() {}
};

class CalculatorAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual const char* getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, apache::thrift::async::TDelayedDestruction::Destructor> channel_ptr;

  virtual ~CalculatorAsyncClient() {}

  CalculatorAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_ = std::unique_ptr<TClientBase::ConnContext>(new TClientBase::ConnContext(channel_->getHeader(),nullptr));
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }
  virtual void add(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t num1, int32_t num2);
  virtual void callback_add(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t num1, int32_t num2);
  virtual void add(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t num1, int32_t num2);
  virtual int64_t sync_add(int32_t num1, int32_t num2);
  virtual int64_t sync_add(const apache::thrift::RpcOptions& rpcOptions, int32_t num1, int32_t num2);
  virtual folly::Future<int64_t> future_add(int32_t num1, int32_t num2);
  virtual folly::Future<int64_t> future_add(const apache::thrift::RpcOptions& rpcOptions, int32_t num1, int32_t num2);
  virtual void add(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t num1, int32_t num2);
  virtual void functor_add(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t num1, int32_t num2);
  static folly::exception_wrapper recv_wrapped_add(int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  static int64_t recv_add(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual int64_t recv_instance_add(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_add(int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void addT(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t num1, int32_t num2);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_addT(Protocol_* prot, int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static int64_t recv_addT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
 protected:
  std::unique_ptr<apache::thrift::server::TConnectionContext>connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

class Calculator_add_pargs : private boost::totally_ordered<Calculator_add_pargs> {
 public:
  virtual ~Calculator_add_pargs() throw() {}

  int32_t* num1;
  int32_t* num2;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      num1 = false;
      num2 = false;
    }

    bool num1;
    bool num2;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

class Calculator_add_presult : private boost::totally_ordered<Calculator_add_presult> {
 public:
  virtual ~Calculator_add_presult() throw() {}

  int64_t* success;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
    }

    bool success;
  } __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

}} // example::cpp2
namespace apache { namespace thrift {

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::example::cpp2::Calculator_add_pargs>::write(Protocol* proto, const  ::example::cpp2::Calculator_add_pargs* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::example::cpp2::Calculator_add_pargs>::read(Protocol* proto,   ::example::cpp2::Calculator_add_pargs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::example::cpp2::Calculator_add_pargs>::serializedSize(Protocol* proto, const  ::example::cpp2::Calculator_add_pargs* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::example::cpp2::Calculator_add_pargs>::serializedSizeZC(Protocol* proto, const  ::example::cpp2::Calculator_add_pargs* obj) {
  return obj->serializedSizeZC(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::example::cpp2::Calculator_add_presult>::write(Protocol* proto, const  ::example::cpp2::Calculator_add_presult* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::example::cpp2::Calculator_add_presult>::read(Protocol* proto,   ::example::cpp2::Calculator_add_presult* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::example::cpp2::Calculator_add_presult>::serializedSize(Protocol* proto, const  ::example::cpp2::Calculator_add_presult* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::example::cpp2::Calculator_add_presult>::serializedSizeZC(Protocol* proto, const  ::example::cpp2::Calculator_add_presult* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift