/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Calculator.h"

#include "Calculator.tcc"

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace example { namespace cpp2 {

const char* CalculatorAsyncClient::getServiceName() {
  return "Calculator";
}

void CalculatorAsyncClient::add(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t num1, int32_t num2) {
  ::apache::thrift::RpcOptions rpcOptions;
  add(rpcOptions, std::move(callback), num1, num2);
}

void CalculatorAsyncClient::add(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t num1, int32_t num2) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      addT(&writer, rpcOptions, std::move(callback), num1, num2);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      addT(&writer, rpcOptions, std::move(callback), num1, num2);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

int64_t CalculatorAsyncClient::sync_add(int32_t num1, int32_t num2) {
  ::apache::thrift::RpcOptions rpcOptions;
  return sync_add(rpcOptions, num1, num2);
}

int64_t CalculatorAsyncClient::sync_add(apache::thrift::RpcOptions& rpcOptions, int32_t num1, int32_t num2) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback2(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  add(rpcOptions, std::move(callback2), num1, num2);
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  return recv_add(_returnState);
}

folly::Future<int64_t> CalculatorAsyncClient::future_add(int32_t num1, int32_t num2) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_add(rpcOptions, num1, num2);
}

folly::Future<int64_t> CalculatorAsyncClient::future_add(apache::thrift::RpcOptions& rpcOptions, int32_t num1, int32_t num2) {
  folly::Promise<int64_t> promise3;
  auto future4 = promise3.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback5(new apache::thrift::FutureCallback<int64_t>(std::move(promise3), recv_wrapped_add));
  add(rpcOptions, std::move(callback5), num1, num2);
  return std::move(future4);
}

void CalculatorAsyncClient::add(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t num1, int32_t num2) {
  add(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),num1,num2);
}

folly::exception_wrapper CalculatorAsyncClient::recv_wrapped_add(int64_t& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_addT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_addT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

int64_t CalculatorAsyncClient::recv_add(::apache::thrift::ClientReceiveState& state) {
  int64_t _return;
  auto ew = recv_wrapped_add(_return, state);
  if (ew) {
    ew.throwException();
  }
  return _return;
}

int64_t CalculatorAsyncClient::recv_instance_add(::apache::thrift::ClientReceiveState& state) {
  return recv_add(state);
}

folly::exception_wrapper CalculatorAsyncClient::recv_instance_wrapped_add(int64_t& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_add(_return, state);
}

template uint32_t Calculator_add_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t Calculator_add_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Calculator_add_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Calculator_add_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Calculator_add_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t Calculator_add_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Calculator_add_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Calculator_add_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Calculator_add_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t Calculator_add_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Calculator_add_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Calculator_add_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Calculator_add_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t Calculator_add_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Calculator_add_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Calculator_add_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
}} // example::cpp2
namespace apache { namespace thrift {

}} // apache::thrift